// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package lOB

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// LOBMetaData contains all meta data concerning the LOB contract.
var LOBMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MatchAnOrder\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"id\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"}],\"name\":\"addOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"askHeadId\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidHeadId\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrderBook\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// LOBABI is the input ABI used to generate the binding from.
// Deprecated: Use LOBMetaData.ABI instead.
var LOBABI = LOBMetaData.ABI

// LOBBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LOBMetaData.Bin instead.
var LOBBin = LOBMetaData.Bin

// DeployLOB deploys a new Ethereum contract, binding an instance of LOB to it.
func DeployLOB(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LOB, error) {
	parsed, err := LOBMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LOBBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LOB{LOBCaller: LOBCaller{contract: contract}, LOBTransactor: LOBTransactor{contract: contract}, LOBFilterer: LOBFilterer{contract: contract}}, nil
}

// LOB is an auto generated Go binding around an Ethereum contract.
type LOB struct {
	LOBCaller     // Read-only binding to the contract
	LOBTransactor // Write-only binding to the contract
	LOBFilterer   // Log filterer for contract events
}

// LOBCaller is an auto generated read-only Go binding around an Ethereum contract.
type LOBCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LOBTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LOBTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LOBFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LOBFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LOBSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LOBSession struct {
	Contract     *LOB              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LOBCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LOBCallerSession struct {
	Contract *LOBCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// LOBTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LOBTransactorSession struct {
	Contract     *LOBTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LOBRaw is an auto generated low-level Go binding around an Ethereum contract.
type LOBRaw struct {
	Contract *LOB // Generic contract binding to access the raw methods on
}

// LOBCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LOBCallerRaw struct {
	Contract *LOBCaller // Generic read-only contract binding to access the raw methods on
}

// LOBTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LOBTransactorRaw struct {
	Contract *LOBTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLOB creates a new instance of LOB, bound to a specific deployed contract.
func NewLOB(address common.Address, backend bind.ContractBackend) (*LOB, error) {
	contract, err := bindLOB(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LOB{LOBCaller: LOBCaller{contract: contract}, LOBTransactor: LOBTransactor{contract: contract}, LOBFilterer: LOBFilterer{contract: contract}}, nil
}

// NewLOBCaller creates a new read-only instance of LOB, bound to a specific deployed contract.
func NewLOBCaller(address common.Address, caller bind.ContractCaller) (*LOBCaller, error) {
	contract, err := bindLOB(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LOBCaller{contract: contract}, nil
}

// NewLOBTransactor creates a new write-only instance of LOB, bound to a specific deployed contract.
func NewLOBTransactor(address common.Address, transactor bind.ContractTransactor) (*LOBTransactor, error) {
	contract, err := bindLOB(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LOBTransactor{contract: contract}, nil
}

// NewLOBFilterer creates a new log filterer instance of LOB, bound to a specific deployed contract.
func NewLOBFilterer(address common.Address, filterer bind.ContractFilterer) (*LOBFilterer, error) {
	contract, err := bindLOB(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LOBFilterer{contract: contract}, nil
}

// bindLOB binds a generic wrapper to an already deployed contract.
func bindLOB(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LOBMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LOB *LOBRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LOB.Contract.LOBCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LOB *LOBRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LOB.Contract.LOBTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LOB *LOBRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LOB.Contract.LOBTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LOB *LOBCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LOB.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LOB *LOBTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LOB.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LOB *LOBTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LOB.Contract.contract.Transact(opts, method, params...)
}

// AskHeadId is a free data retrieval call binding the contract method 0xc50aeaa9.
//
// Solidity: function askHeadId() view returns(bytes16)
func (_LOB *LOBCaller) AskHeadId(opts *bind.CallOpts) ([16]byte, error) {
	var out []interface{}
	err := _LOB.contract.Call(opts, &out, "askHeadId")

	if err != nil {
		return *new([16]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([16]byte)).(*[16]byte)

	return out0, err

}

// AskHeadId is a free data retrieval call binding the contract method 0xc50aeaa9.
//
// Solidity: function askHeadId() view returns(bytes16)
func (_LOB *LOBSession) AskHeadId() ([16]byte, error) {
	return _LOB.Contract.AskHeadId(&_LOB.CallOpts)
}

// AskHeadId is a free data retrieval call binding the contract method 0xc50aeaa9.
//
// Solidity: function askHeadId() view returns(bytes16)
func (_LOB *LOBCallerSession) AskHeadId() ([16]byte, error) {
	return _LOB.Contract.AskHeadId(&_LOB.CallOpts)
}

// BidHeadId is a free data retrieval call binding the contract method 0x9dc781fa.
//
// Solidity: function bidHeadId() view returns(bytes16)
func (_LOB *LOBCaller) BidHeadId(opts *bind.CallOpts) ([16]byte, error) {
	var out []interface{}
	err := _LOB.contract.Call(opts, &out, "bidHeadId")

	if err != nil {
		return *new([16]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([16]byte)).(*[16]byte)

	return out0, err

}

// BidHeadId is a free data retrieval call binding the contract method 0x9dc781fa.
//
// Solidity: function bidHeadId() view returns(bytes16)
func (_LOB *LOBSession) BidHeadId() ([16]byte, error) {
	return _LOB.Contract.BidHeadId(&_LOB.CallOpts)
}

// BidHeadId is a free data retrieval call binding the contract method 0x9dc781fa.
//
// Solidity: function bidHeadId() view returns(bytes16)
func (_LOB *LOBCallerSession) BidHeadId() ([16]byte, error) {
	return _LOB.Contract.BidHeadId(&_LOB.CallOpts)
}

// GetOrderBook is a free data retrieval call binding the contract method 0xb248c4ef.
//
// Solidity: function getOrderBook() view returns(string)
func (_LOB *LOBCaller) GetOrderBook(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LOB.contract.Call(opts, &out, "getOrderBook")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetOrderBook is a free data retrieval call binding the contract method 0xb248c4ef.
//
// Solidity: function getOrderBook() view returns(string)
func (_LOB *LOBSession) GetOrderBook() (string, error) {
	return _LOB.Contract.GetOrderBook(&_LOB.CallOpts)
}

// GetOrderBook is a free data retrieval call binding the contract method 0xb248c4ef.
//
// Solidity: function getOrderBook() view returns(string)
func (_LOB *LOBCallerSession) GetOrderBook() (string, error) {
	return _LOB.Contract.GetOrderBook(&_LOB.CallOpts)
}

// AddOrder is a paid mutator transaction binding the contract method 0xe781295c.
//
// Solidity: function addOrder(bytes16 id, uint256 price, uint256 amount, bool side) returns()
func (_LOB *LOBTransactor) AddOrder(opts *bind.TransactOpts, id [16]byte, price *big.Int, amount *big.Int, side bool) (*types.Transaction, error) {
	return _LOB.contract.Transact(opts, "addOrder", id, price, amount, side)
}

// AddOrder is a paid mutator transaction binding the contract method 0xe781295c.
//
// Solidity: function addOrder(bytes16 id, uint256 price, uint256 amount, bool side) returns()
func (_LOB *LOBSession) AddOrder(id [16]byte, price *big.Int, amount *big.Int, side bool) (*types.Transaction, error) {
	return _LOB.Contract.AddOrder(&_LOB.TransactOpts, id, price, amount, side)
}

// AddOrder is a paid mutator transaction binding the contract method 0xe781295c.
//
// Solidity: function addOrder(bytes16 id, uint256 price, uint256 amount, bool side) returns()
func (_LOB *LOBTransactorSession) AddOrder(id [16]byte, price *big.Int, amount *big.Int, side bool) (*types.Transaction, error) {
	return _LOB.Contract.AddOrder(&_LOB.TransactOpts, id, price, amount, side)
}

// LOBMatchAnOrderIterator is returned from FilterMatchAnOrder and is used to iterate over the raw logs and unpacked data for MatchAnOrder events raised by the LOB contract.
type LOBMatchAnOrderIterator struct {
	Event *LOBMatchAnOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LOBMatchAnOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LOBMatchAnOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LOBMatchAnOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LOBMatchAnOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LOBMatchAnOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LOBMatchAnOrder represents a MatchAnOrder event raised by the LOB contract.
type LOBMatchAnOrder struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMatchAnOrder is a free log retrieval operation binding the contract event 0x28dfc1d8df821d87d39570899e4ecce2fe629c52e2cbc41b97980c370030885a.
//
// Solidity: event MatchAnOrder()
func (_LOB *LOBFilterer) FilterMatchAnOrder(opts *bind.FilterOpts) (*LOBMatchAnOrderIterator, error) {

	logs, sub, err := _LOB.contract.FilterLogs(opts, "MatchAnOrder")
	if err != nil {
		return nil, err
	}
	return &LOBMatchAnOrderIterator{contract: _LOB.contract, event: "MatchAnOrder", logs: logs, sub: sub}, nil
}

// WatchMatchAnOrder is a free log subscription operation binding the contract event 0x28dfc1d8df821d87d39570899e4ecce2fe629c52e2cbc41b97980c370030885a.
//
// Solidity: event MatchAnOrder()
func (_LOB *LOBFilterer) WatchMatchAnOrder(opts *bind.WatchOpts, sink chan<- *LOBMatchAnOrder) (event.Subscription, error) {

	logs, sub, err := _LOB.contract.WatchLogs(opts, "MatchAnOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LOBMatchAnOrder)
				if err := _LOB.contract.UnpackLog(event, "MatchAnOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMatchAnOrder is a log parse operation binding the contract event 0x28dfc1d8df821d87d39570899e4ecce2fe629c52e2cbc41b97980c370030885a.
//
// Solidity: event MatchAnOrder()
func (_LOB *LOBFilterer) ParseMatchAnOrder(log types.Log) (*LOBMatchAnOrder, error) {
	event := new(LOBMatchAnOrder)
	if err := _LOB.contract.UnpackLog(event, "MatchAnOrder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
